plugins {
  id 'java'
  id 'org.springframework.boot' version '3.4.2'
  id 'io.spring.dependency-management' version '1.1.6'
  id 'org.graalvm.buildtools.native' version '0.10.3'
  id 'org.cyclonedx.bom' version '1.10.0'
  id 'io.spring.javaformat' version '0.0.43'
  id "io.spring.nohttp" version "0.0.11"
  id 'pl.allegro.tech.build.axion-release' version "1.18.7"
  id 'maven-publish'
}
// version '1.2'

version = scmVersion.version

apply plugin: 'java'
apply plugin: 'checkstyle'
apply plugin: 'io.spring.javaformat'

gradle.startParameter.excludedTaskNames += [ "checkFormatAot", "checkFormatAotTest" ]

group = 'org.springframework.samples'

java {
  sourceCompatibility = JavaVersion.VERSION_17
  // archiveName = 'spring-petclinic' 
  // version = '0.1.3-SNAPSHOT'
}

repositories {
  mavenCentral()
}

ext.checkstyleVersion = "10.20.1"
ext.springJavaformatCheckstyleVersion = "0.0.43"
ext.webjarsLocatorLiteVersion = "1.0.1"
ext.webjarsFontawesomeVersion = "4.7.0"
ext.webjarsBootstrapVersion = "5.3.3"

dependencies {
  // Workaround for AOT issue (https://github.com/spring-projects/spring-framework/pull/33949) -->
  implementation 'io.projectreactor:reactor-core'

  implementation 'org.springframework.boot:spring-boot-starter-cache'
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-validation'
  implementation 'javax.cache:cache-api'
  implementation 'jakarta.xml.bind:jakarta.xml.bind-api'
  runtimeOnly 'org.springframework.boot:spring-boot-starter-actuator'
  runtimeOnly "org.webjars:webjars-locator-lite:${webjarsLocatorLiteVersion}"
  runtimeOnly "org.webjars.npm:bootstrap:${webjarsBootstrapVersion}"
  runtimeOnly "org.webjars.npm:font-awesome:${webjarsFontawesomeVersion}"
  runtimeOnly 'com.github.ben-manes.caffeine:caffeine'
  runtimeOnly 'com.h2database:h2'
  runtimeOnly 'com.mysql:mysql-connector-j'
  runtimeOnly 'org.postgresql:postgresql'
  developmentOnly 'org.springframework.boot:spring-boot-devtools'
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'org.springframework.boot:spring-boot-testcontainers'
  testImplementation 'org.springframework.boot:spring-boot-docker-compose'
  testImplementation 'org.testcontainers:junit-jupiter'
  testImplementation 'org.testcontainers:mysql'
  checkstyle "io.spring.javaformat:spring-javaformat-checkstyle:${springJavaformatCheckstyleVersion}"
  checkstyle "com.puppycrawl.tools:checkstyle:${checkstyleVersion}"
}

tasks.named('test') {
  useJUnitPlatform()
}

checkstyle {
  configDirectory = project.file('src/checkstyle')
  configFile = file('src/checkstyle/nohttp-checkstyle.xml')
}

checkstyleNohttp {
  configDirectory = project.file('src/checkstyle')
  configFile = file('src/checkstyle/nohttp-checkstyle.xml')
}

tasks.named("formatMain").configure { dependsOn("checkstyleMain") }
tasks.named("formatMain").configure { dependsOn("checkstyleNohttp") }

tasks.named("formatTest").configure { dependsOn("checkstyleTest") }
tasks.named("formatTest").configure { dependsOn("checkstyleNohttp") }

checkstyleAot.enabled = false
checkstyleAotTest.enabled = false

checkFormatAot.enabled = false
checkFormatAotTest.enabled = false

formatAot.enabled = false
formatAotTest.enabled = false

task showInBrowser {
  doLast {
    def file = project.file('build/reports/tests/test/index.html')
    exec { 
      commandLine 'open', file
    }
  }
}

tasks.named("showInBrowser").configure{ dependsOn ("build") }
tasks.named("showInBrowser").configure{ dependsOn("test") }

// Maven Publish Configuration

def nexusUrl = 'http://localhost:8081/repository/maven-snapshots'  
def nexusUsername = project.hasProperty('nexusUsername') ? project.nexusUsername : System.getenv('NEXUS_USERNAME')
def nexusPassword = project.hasProperty('nexusPassword') ? project.nexusPassword : System.getenv('NEXUS_PASSWORD')

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java  

            artifact file("${buildDir}/libs/spring-petclinic-${version}.jar") 
        }
    }

    repositories {
        maven {
            url nexusUrl
            allowInsecureProtocol = true
            credentials {
                username nexusUsername
                password nexusPassword
            }
        }
    }
}

tasks.named("publish").configure{ dependsOn("build")}
tasks.named("publish").configure{dependsOn("bootJar")}
tasks.named("publishMavenJavaPublicationToMavenRepository").configure{ dependsOn("bootJar")}

task testProxy {
    doLast {
        def url = new URL('http://localhost:8081/repository/maven-central')
        def connection = url.openConnection()
        connection.connect()
        println "Proxy connection successful to Maven Central!"
    }
}
